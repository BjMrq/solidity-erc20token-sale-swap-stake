/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FaucetContract extends Truffle.Contract<FaucetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FaucetInstance>;
}

export interface Request {
  name: "Request";
  args: {
    _beneficiary: string;
    _balance: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = Request;

export interface FaucetInstance extends Truffle.ContractInstance {
  lockTime(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  makeItRain: {
    (_beneficiary: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    lockTime(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    makeItRain: {
      (_beneficiary: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
